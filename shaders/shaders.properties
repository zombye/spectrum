##--## Shader Options Menu ##-------------------------------------------------##

# To be redesigned at some point.
sliders = \
HBAO_RADIUS HBAO_DIRECTIONS HBAO_ANGLE_SAMPLES \
\
CAMERA_AUTOEXPOSURE_BIAS CAMERA_FOCUS CAMERA_FSTOP CAMERA_ISO CAMERA_SHUTTER_SPEED CAMERA_IRIS_BLADE_COUNT CAMERA_IRIS_BLADE_ROTATION CAMERA_IRIS_BLADE_ROUNDING CAMERA_LENS_DISTORTION CAMERA_CHROMATIC_ABBERATION CAMERA_ANAMORPHIC_SCALE \
DOF_SAMPLES \
MOTION_BLUR_SAMPLES \
\
CLOUDS2D_SELFSHADOW_QUALITY CLOUDS2D_COVERAGE \
\
CLOUDS3D_DETAIL_NOISE_OCTAVES CLOUDS3D_STEPS_VIEW CLOUDS3D_STEPS_SUN CLOUDS3D_STEPS_SKY CLOUDS3D_ALTITUDE CLOUDS3D_THICKNESS_MULT CLOUDS3D_COVERAGE CLOUDS3D_SCALE CLOUDS3D_SPEED \
\
VL_AIR_STEPS FOG_AIR_DENSITY FOG_RAIN_DENSITY \
\
VL_WATER_STEPS WATER_SCATTERING_R WATER_SCATTERING_G WATER_SCATTERING_B WATER_TRANSMISSION_R WATER_TRANSMISSION_G WATER_TRANSMISSION_B \
\
PARALLAX_DEPTH PARALLAX_QUALITY \
\
shadowMapResolution SHADOW_DISTANCE_EFFECTIVE shadowDistance \
SHADOW_FILTER_SAMPLES SHADOW_SEARCH_SAMPLES \
RSM_SAMPLES RSM_BRIGHTNESS RSM_RADIUS \
\
SSR_RAY_COUNT SSR_TAIL_CLAMP SSR_RAY_STRIDE \
\
TAA_MOTION_REJECTION \
\
TONEMAP_TOE_STRENGTH TONEMAP_TOE_LENGTH TONEMAP_LINEAR_LENGTH TONEMAP_SHOULDER_CURVE \
\
WATER_WAVES_COUNT WATER_WAVES_G WATER_WAVES_WAVELENGTH WATER_WAVES_WAVE_HEIGHT_RATIO WATER_WAVES_WAVELENGTH_GAIN WATER_WAVES_WAVE_HEIGHT_GAIN WATER_WAVES_SHARPENING WATER_PARALLAX_DEPTH_MULTIPLIER WATER_PARALLAX_STEPS \
\
CAUSTICS_POWER CAUSTICS_QUALITY CAUSTICS_HIGH_SUBSEARCH_ITERATIONS \
\
BLOOM_AMOUNT CONTRAST SATURATION CONE_OVERLAP_SIMULATION WHITE_BALANCE HAND_FOV sunPathRotation TIME_SCALE

screen = [ao] [camera] [clouds2d] [clouds3d] [fogAir] [fogWater] [parallax] [postProcess] [shadowMap] [ssr] [taa] [tonemap] [waterCaustics] [waterWaves] [misc]
screen.misc = BLOOM BLOOM_AMOUNT CONTRAST SATURATION LOWLIGHT_DESATURATION LOWLIGHT_NOISE CONE_OVERLAP_SIMULATION WHITE_BALANCE LUT BLOCK_LIGHT_DIRECTIONAL HAND_FOV REFRACTION_MODE RESOURCE_FORMAT SSCS sunPathRotation TIME_SCALE TOTAL_INTERNAL_REFLECTION [unassigned]
screen.unassigned = *

screen.ao = BLOCK_LIGHT_USE_AO GLOBAL_LIGHT_USE_AO <empty> <empty> HBAO HBAO_RADIUS HBAO_DIRECTIONS HBAO_ANGLE_SAMPLES
screen.camera = \
CAMERA_AUTOEXPOSURE CAMERA_AUTOEXPOSURE_BIAS CAMERA_FOCUS \
CAMERA_FSTOP CAMERA_ISO CAMERA_SHUTTER_SPEED \
<empty> <empty> <empty> \
CAMERA_IRIS_BLADE_COUNT CAMERA_IRIS_BLADE_ROTATION CAMERA_IRIS_BLADE_ROUNDING \
CAMERA_ANAMORPHIC_SCALE CAMERA_LENS_DISTORTION CAMERA_CHROMATIC_ABBERATION \
<empty> <empty> <empty> \
[dof] [motionBlur]
screen.camera.columns=3

screen.clouds2d = CLOUDS2D CLOUDS2D_SELFSHADOW_QUALITY CLOUDS2D_USE_WORLD_TIME CLOUDS2D_COVERAGE
screen.clouds3d = CLOUDS3D CLOUDS3D_DETAIL_NOISE_OCTAVES CLOUDS3D_STEPS_VIEW CLOUDS3D_STEPS_SUN CLOUDS3D_ALTERNATE_SKYLIGHT CLOUDS3D_STEPS_SKY <empty> <empty> CLOUDS3D_ALTITUDE CLOUDS3D_THICKNESS_MULT CLOUDS3D_COVERAGE CLOUDS3D_SCALE CLOUDS3D_USE_WORLD_TIME CLOUDS3D_SPEED
screen.fogAir = VL_AIR VL_AIR_STEPS DISTANT_VL FOG_AIR_DENSITY FOG_RAIN_DENSITY
screen.fogWater = VL_WATER VL_WATER_STEPS VL_WATER_CAUSTICS UNDERWATER_ADAPTATION WATER_REALISTIC_PHASE_FUNCTION <empty> <empty> <empty> WATER_SCATTERING_R WATER_TRANSMISSION_R WATER_SCATTERING_G WATER_TRANSMISSION_G WATER_SCATTERING_B WATER_TRANSMISSION_B
screen.parallax = PARALLAX PARALLAX_SHADOWS SMOOTH_PARALLAX SMART_PARALLAX <empty> <empty> PARALLAX_DEPTH PARALLAX_QUALITY
screen.shadowMap = shadowMapResolution SHADOW_DISTANCE_EFFECTIVE SHADOW_INFINITE_RENDER_DISTANCE shadowDistance <empty> <empty> [shadowMapping] [rsm] <empty> <empty> SHADOW_BACKFACE_CULLING SHADOW_DISABLE_ALPHA_MIPMAP
screen.ssr = SSR_RAY_COUNT SSR_TAIL_CLAMP SSR_RAY_STRIDE SSR_MULTILAYER <empty> <empty> SSR_ALLOW_VL_AIR SSR_ALLOW_VL_WATER
screen.taa = TAA TAA_CLIP TAA_FILTER_HISTORY TAA_FILTER_CURRENT <empty> <empty> TAA_OFFCENTER_REJECTION
screen.tonemap = TONEMAP_TOE_STRENGTH TONEMAP_TOE_LENGTH TONEMAP_LINEAR_LENGTH TONEMAP_SHOULDER_CURVE
screen.waterWaves = WATER_WAVES_VERSION <empty> [waves1] [waves2] <empty> <empty> WATER_PARALLAX WATER_PARALLAX_DEPTH_MULTIPLIER WATER_PARALLAX_STEPS
screen.waterCaustics = CAUSTICS CAUSTICS_POWER CAUSTICS_DITHERED CAUSTICS_QUALITY CAUSTICS_HIGH_SUBSEARCH_ITERATIONS

screen.dof = DOF DOF_SIMPLE DOF_SAMPLES
screen.motionBlur = MOTION_BLUR MOTION_BLUR_SAMPLES

screen.shadowMapping = SHADOW_FILTER SHADOW_COLORED SHADOW_FILTER_SAMPLES SHADOW_SEARCH_SAMPLES SHADOW_PENUMBRA_SHARPENING
screen.rsm = RSM RSM_SAMPLES RSM_BRIGHTNESS RSM_RADIUS <empty> <empty> RSM_LEAK_PREVENTION

screen.waves1 = WATER_WAVES1_COUNT WATER_WAVES1_G WATER_WAVES1_WAVELENGTH WATER_WAVES1_HEIGHT_RATIO WATER_WAVES1_WAVELENGTH_GAIN WATER_WAVES1_HEIGHT_GAIN WATER_WAVES1_SHARPENING
screen.waves2 = WATER_WAVES2_COUNT WATER_WAVES2_G WATER_WAVES2_WAVELENGTH WATER_WAVES2_HEIGHT_RATIO WATER_WAVES2_WAVELENGTH_GAIN WATER_WAVES2_HEIGHT_GAIN

##--## Custom Textures #------------------------------------------------------##

# Lookup table
texture.composite.depthtex2 = image/lut.png

# Atmosphere LUTs
texture.deferred.depthtex0 = image/atmosphere/transmittance_fp16.dat TEXTURE_2D RGB16F 256 64 RGB HALF_FLOAT
texture.deferred.depthtex2 = image/atmosphere/scattering_fp16.dat TEXTURE_3D RGB16F 64 256 96 RGB HALF_FLOAT

# Custom noise textures
texture.deferred.colortex7 = image/noise3d.dat TEXTURE_3D RG8 64 64 64 RG UNSIGNED_BYTE
texture.noise = image/noise.png

texture.gbuffers.gaux4 = image/waterNoise.dat TEXTURE_3D RGB8 256 256 256 RGBA UNSIGNED_BYTE

##--## Misc Renderer Configuration ##-----------------------------------------##

clouds      = off
oldLighting = false
separateAo  = true
rain.depth  = true

##--## Program Toggles ##-----------------------------------------------------##

program.world0/deferred10.enabled = RSM
program.world0/deferred11.enabled = RSM
program.world0/deferred12.enabled = RSM
program.world0/deferred13.enabled = RSM
program.world0/deferred14.enabled = RSM

program.world0/deferred20.enabled = HBAO

program.world0/composite50.enabled = DOF
program.world0/composite51.enabled = DOF

program.world0/composite70.enabled = BLOOM
program.world0/composite71.enabled = BLOOM
program.world0/composite72.enabled = BLOOM
program.world0/composite73.enabled = BLOOM
program.world0/composite74.enabled = BLOOM
program.world0/composite75.enabled = BLOOM
program.world0/composite76.enabled = BLOOM
program.world0/composite77.enabled = BLOOM
program.world0/composite78.enabled = BLOOM
program.world0/composite79.enabled = BLOOM
program.world0/composite80.enabled = BLOOM
program.world0/composite81.enabled = BLOOM
program.world0/composite82.enabled = BLOOM
program.world0/composite83.enabled = BLOOM
program.world0/composite84.enabled = BLOOM
program.world0/composite85.enabled = BLOOM
program.world0/composite86.enabled = BLOOM
program.world0/composite87.enabled = BLOOM
program.world0/composite88.enabled = BLOOM

##--## Alpha Test #-----------------------------------------------------------##

# skybasic is always simply discarded
alphaTest.gbuffers_skybasic = off
# skytextured is probably also always going to simply be discarded
alphaTest.gbuffers_skytextured = off

# Alpha test needs to be disabled
alphaTest.gbuffers_textured = off
alphaTest.gbuffers_terrain  = off
alphaTest.gbuffers_block    = off
alphaTest.gbuffers_entities = off
alphaTest.gbuffers_hand     = off
alphaTest.gbuffers_weather  = off
alphaTest.shadow            = off

# Alpha test is done in the shader itself to allow skipping most of the operations
alphaTest.gbuffers_water      = off
alphaTest.gbuffers_hand_water = off

##--## Blend Functions ##-----------------------------------------------------##

blend.gbuffers_textured   = off
blend.gbuffers_terrain    = off
blend.gbuffers_block      = off
blend.gbuffers_entities   = off
blend.gbuffers_hand       = off
blend.gbuffers_water      = ONE ONE_MINUS_SRC_ALPHA ONE ONE_MINUS_SRC_ALPHA
blend.gbuffers_hand_water = ONE ONE_MINUS_SRC_ALPHA ONE ONE_MINUS_SRC_ALPHA

# temp disabled until it's rendered after deferred
blend.gbuffers_weather    = off


blend.composite80 = ONE SRC_ALPHA ONE ONE
blend.composite81 = ONE SRC_ALPHA ONE ONE
blend.composite82 = ONE SRC_ALPHA ONE ONE
blend.composite83 = ONE SRC_ALPHA ONE ONE
blend.composite84 = ONE SRC_ALPHA ONE ONE
blend.composite85 = ONE SRC_ALPHA ONE ONE
blend.composite86 = ONE SRC_ALPHA ONE ONE
blend.composite87 = ONE SRC_ALPHA ONE ONE
blend.composite88 = ONE SRC_ALPHA ONE ONE

##--## Render Scale & Offset ##-----------------------------------------------##

##--## Buffer Flipping ##-----------------------------------------------------##

flip.composite.colortex3 = true

##--## Colortex Size ##-------------------------------------------------------##

# Cloud "patch" noise
size.buffer.colortex9 = 4096 4096

##--## Custom Uniforms ##-----------------------------------------------------##

uniform.vec2.viewResolution = vec2(viewWidth, viewHeight)
uniform.vec2.viewPixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

# Per-frame Rn sequence
uniform.float.frameR1 = frac(0.5 + frameCounter / 1.61803398874989484820458683436563)
variable.float.frameR2X = frac(0.5 + frameCounter / 1.32471795724474602596090885447809)
variable.float.frameR2Y = frac(0.5 + frameCounter / (1.32471795724474602596090885447809 * 1.32471795724474602596090885447809))
uniform.vec2.frameR2 = vec2(frameR2X, frameR2Y)

# TAA offset
uniform.int.frameMod15 = frameCounter % 15
uniform.int.previousFrameMod15 = (frameCounter - 1) % 15

# Skips the first 32 points
variable.float.halton2     = if(frameMod15 == 0, 0.5156, frameMod15 == 1, 0.2656, frameMod15 == 2, 0.7656, frameMod15 == 3, 0.1406, frameMod15 == 4, 0.6406, frameMod15 == 5, 0.3906, frameMod15 == 6, 0.8906, frameMod15 == 7, 0.0781, frameMod15 == 8, 0.5781, frameMod15 ==  9, 0.3281, frameMod15 == 10, 0.8281, frameMod15 == 11, 0.2031, frameMod15 == 12, 0.7031, frameMod15 == 13, 0.4531, frameMod15 == 14, 0.9531, 0.5)
variable.float.halton2Prev = if(frameMod15 == 1, 0.5156, frameMod15 == 2, 0.2656, frameMod15 == 3, 0.7656, frameMod15 == 4, 0.1406, frameMod15 == 5, 0.6406, frameMod15 == 6, 0.3906, frameMod15 == 7, 0.8906, frameMod15 == 8, 0.0781, frameMod15 == 9, 0.5781, frameMod15 == 10, 0.3281, frameMod15 == 11, 0.8281, frameMod15 == 12, 0.2031, frameMod15 == 13, 0.7031, frameMod15 == 14, 0.4531, frameMod15 ==  0, 0.9531, 0.5)
variable.float.halton3     = if(frameMod15 == 0, 0.2346, frameMod15 == 1, 0.5679, frameMod15 == 2, 0.9012, frameMod15 == 3, 0.0494, frameMod15 == 4, 0.3827, frameMod15 == 5, 0.7160, frameMod15 == 6, 0.1605, frameMod15 == 7, 0.4938, frameMod15 == 8, 0.8272, frameMod15 ==  9, 0.2716, frameMod15 == 10, 0.6049, frameMod15 == 11, 0.9383, frameMod15 == 12, 0.0864, frameMod15 == 13, 0.4198, frameMod15 == 14, 0.7531, 0.5)
variable.float.halton3Prev = if(frameMod15 == 1, 0.2346, frameMod15 == 2, 0.5679, frameMod15 == 3, 0.9012, frameMod15 == 4, 0.0494, frameMod15 == 5, 0.3827, frameMod15 == 6, 0.7160, frameMod15 == 7, 0.1605, frameMod15 == 8, 0.4938, frameMod15 == 9, 0.8272, frameMod15 == 10, 0.2716, frameMod15 == 11, 0.6049, frameMod15 == 12, 0.9383, frameMod15 == 13, 0.0864, frameMod15 == 14, 0.4198, frameMod15 ==  0, 0.7531, 0.5)
uniform.vec2.taaOffset = vec2((halton2 * 2.0 - 1.0) / viewWidth, (halton3 * 2.0 - 1.0) / viewHeight)
uniform.vec2.taaOffsetPrevious = vec2((halton2Prev * 2.0 - 1.0) / viewWidth, (halton3Prev * 2.0 - 1.0) / viewHeight)

variable.float.sunVectorNorm = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
uniform.vec3.sunVectorView = vec3(sunPosition.x * sunVectorNorm, sunPosition.y * sunVectorNorm, sunPosition.z * sunVectorNorm)
variable.float.sunVectorX = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunVectorY = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunVectorZ = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunVector = vec3(sunVectorX * sunVectorNorm, sunVectorY * sunVectorNorm, sunVectorZ * sunVectorNorm)

variable.float.moonVectorNorm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
uniform.vec3.moonVectorView = vec3(moonPosition.x * moonVectorNorm, moonPosition.y * moonVectorNorm, moonPosition.z * moonVectorNorm)
variable.float.moonVectorX = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonVectorY = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonVectorZ = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonVector = vec3(moonVectorX * moonVectorNorm, moonVectorY * moonVectorNorm, moonVectorZ * moonVectorNorm)

variable.float.shadowLightVectorNorm = 1.0 / sqrt((shadowLightPosition.x * shadowLightPosition.x) + (shadowLightPosition.y * shadowLightPosition.y) + (shadowLightPosition.z * shadowLightPosition.z))
uniform.vec3.shadowLightVectorView = vec3(shadowLightPosition.x * shadowLightVectorNorm, shadowLightPosition.y * shadowLightVectorNorm, shadowLightPosition.z * shadowLightVectorNorm)
variable.float.shadowLightVectorX = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.shadowLightVectorY = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.shadowLightVectorZ = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
uniform.vec3.shadowLightVector = vec3(shadowLightVectorX * shadowLightVectorNorm, shadowLightVectorY * shadowLightVectorNorm, shadowLightVectorZ * shadowLightVectorNorm)
